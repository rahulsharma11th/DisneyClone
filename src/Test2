using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using System.IO;

public static class UserProfileFunction
{
    private static readonly HttpClient _httpClient = new HttpClient();

    [FunctionName("UserProfileFunction")]
    public static async Task<IActionResult> RunAsync(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log,
        ExecutionContext context)
    {
        log.LogInformation("C# HTTP trigger function processed a request.");

        var config = new ConfigurationBuilder()
            .SetBasePath(context.FunctionAppDirectory)
            .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true)
            .AddEnvironmentVariables()
            .Build();

        string username = req.Query["username"];
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        dynamic data = JsonConvert.DeserializeObject(requestBody);
        username = username ?? data?.username;

        if (string.IsNullOrEmpty(username))
        {
            return new BadRequestObjectResult("Please provide a username in the query string or request body.");
        }

        var siteUrl = config["SharePoint:SiteUrl"];
        var userProfiles = await GetUserProfileAndReportees(username, siteUrl);

        return new OkObjectResult(userProfiles);
    }

    private static async Task<List<Dictionary<string, string>>> GetUserProfileAndReportees(string username, string siteUrl)
    {
        var userProfiles = new List<Dictionary<string, string>>();
        var visitedUsers = new HashSet<string>();

        await GetProfileAndReporteesRecursive(username, siteUrl, userProfiles, visitedUsers);

        return userProfiles;
    }

    private static async Task GetProfileAndReporteesRecursive(string username, string siteUrl, List<Dictionary<string, string>> userProfiles, HashSet<string> visitedUsers)
    {
        if (!visitedUsers.Contains(username))
        {
            visitedUsers.Add(username);

            var userProfile = await GetUserProfile(username, siteUrl);
            userProfiles.Add(userProfile);

            var reportees = await GetReportees(username, siteUrl);
            foreach (var reportee in reportees)
            {
                await GetProfileAndReporteesRecursive(reportee, siteUrl, userProfiles, visitedUsers);
            }
        }
    }

    private static async Task<Dictionary<string, string>> GetUserProfile(string username, string siteUrl)
    {
        // Implement the logic to retrieve user profile based on the username
        // Use the SharePoint REST API or Microsoft Graph API here
        // Example:
        var userProfile = new Dictionary<string, string>();
        userProfile.Add("Username", username);

        return userProfile;
    }

    private static async Task<List<string>> GetReportees(string username, string siteUrl)
    {
        // Implement the logic to retrieve direct reportees based on the username
        // Use the SharePoint REST API or Microsoft Graph API here
        // Example:
        var reportees = new List<string> { "reportee1", "reportee2" };

        return reportees;
    }
}
