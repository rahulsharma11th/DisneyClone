using System;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Extensions.Logging;
using Microsoft.SharePoint.Client;
using Microsoft.Identity.Client;
using Microsoft.SharePoint.Client.UserProfiles;

namespace FunctionApp1
{
    public static class SharePointFunction
    {
        [FunctionName("GetUserProfile")]
        public static async Task<HttpResponseMessage> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequestMessage req,
            ILogger log)
        {
            log.LogInformation("C# HTTP trigger function processed a request.");

            string siteUrl = "https://yourtenant.sharepoint.com";
            string clientId = "your-client-id";
            string clientSecret = "your-client-secret";
            string tenantId = "your-tenant-id";
            string userName = "user@yourtenant.onmicrosoft.com"; // Specify the user you want to get profile data for

            var context = await GetSharePointContext(siteUrl, clientId, clientSecret, tenantId);

            PeopleManager peopleManager = new PeopleManager(context);
            PersonProperties personProperties = peopleManager.GetPropertiesFor(userName);
            context.Load(personProperties);
            await context.ExecuteQueryAsync();

            // Now you have the user's profile data in personProperties
            // You can log or return this data as needed

            return new HttpResponseMessage(System.Net.HttpStatusCode.OK)
            {
                Content = new StringContent("User profile data retrieved successfully.")
            };
        }

        private static async Task<ClientContext> GetSharePointContext(string siteUrl, string clientId, string clientSecret, string tenantId)
        {
            string authority = $"https://login.microsoftonline.com/{tenantId}/v2.0";

            IConfidentialClientApplication app = ConfidentialClientApplicationBuilder.Create(clientId)
                .WithClientSecret(clientSecret)
                .WithAuthority(new Uri(authority))
                .Build();

            string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

            AuthenticationResult result = await app.AcquireTokenForClient(scopes).ExecuteAsync();

            var context = new ClientContext(siteUrl);

            // Corrected assignment of the event handler
            context.ExecutingWebRequest += (sender, args) =>
            {
                args.WebRequestExecutor.RequestHeaders["Authorization"] = "Bearer " + result.AccessToken;
            };

            return context;
        }
    }


 

}
