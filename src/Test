using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Microsoft.SharePoint.Client;

public static class UserProfileFunction
{
    [FunctionName("GetUserProfile")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("C# HTTP trigger function processed a request.");

        // Replace these with your SharePoint and user details
        string siteUrl = "https://yoursharepointsite.sharepoint.com";
        string username = "user@yourdomain.com";
        string password = "YourPassword";

        var userProfiles = await GetUserProfile(siteUrl, username, password);

        return new OkObjectResult(userProfiles);
    }

    static async Task<Dictionary<string, string>> GetUserProfile(string siteUrl, string username, string password)
    {
        var userProfiles = new Dictionary<string, string>();

        using (var clientContext = new ClientContext(siteUrl))
        {
            var securePassword = new SecureString();
            foreach (char c in password)
            {
                securePassword.AppendChar(c);
            }

            clientContext.Credentials = new SharePointOnlineCredentials(username, securePassword);

            PeopleManager peopleManager = new PeopleManager(clientContext);
            PersonProperties personProperties = peopleManager.GetMyProperties();

            clientContext.Load(personProperties);
            await clientContext.ExecuteQueryAsync();

            foreach (var userProfileProperty in personProperties.UserProfileProperties)
            {
                userProfiles.Add(userProfileProperty.Key, userProfileProperty.Value.ToString());
            }
        }

        return userProfiles;
    }
}

/////////////




using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using PnP.Core.Auth;
using PnP.Core.Services;

class Program
{
    static async Task Main(string[] args)
    {
        // Load configuration from appsettings.json
        IConfigurationRoot configuration = new ConfigurationBuilder()
            .AddJsonFile("appsettings.json")
            .Build();

        // Set your SharePoint Online site URL and list name in appsettings.json
        string siteUrl = configuration["SharePointOnlineSiteUrl"];
        string listName = configuration["SharePointOnlineListName"];

        // Authenticate to SharePoint Online using user credentials
        var username = configuration["Username"];
        var password = configuration["Password"];

        var authenticationResult = await UserCredentialsAuthentication(username, password, siteUrl);

        // Create a PnPContext using the authentication result
        using (var context = await PnPCoreSdk.CreateAsync(authenticationResult))
        {
            // Retrieve data from SharePoint Online list
            var listItems = await context.Web.Lists.GetByTitle(listName).Items.GetAsync();

            // Display the retrieved data
            foreach (var item in listItems)
            {
                Console.WriteLine($"Title: {item.Values["Title"]}");
                // Add more fields as needed
            }
        }
    }

    static async Task<AuthenticationResult> UserCredentialsAuthentication(string username, string password, string siteUrl)
    {
        var scopes = new[] { siteUrl + "/.default" };

        var authenticationProvider = new PnPCoreAuthenticationProviderBuilder()
            .UseUsernamePassword(username, password)
            .Build();

        var authenticationResult = await authenticationProvider.AuthenticateAsync(scopes);
        return authenticationResult;
    }
}


tets/
//
using System;
using Microsoft.SharePoint.Client;
using Microsoft.SharePoint.Client.Utilities;

class UserProfilePropertiesExample
{
    public static void GetTargetUserProfileProperties()
    {
        try
        {
            string siteUrl = "https://spotenant-admin.sharepoint.com";
            string targetUser = "i:0#.f|membership|alexd@spotenant.onmicrosoft.com";
            string clientId = "yourClientId";
            string clientSecret = "yourClientSecret";

            using (ClientContext clientContext = new AuthenticationManager().GetAppOnlyAuthenticatedContext(siteUrl, clientId, clientSecret))
            {
                // Get the PeopleManager object and then get the target user's properties.
                PeopleManager peopleManager = new PeopleManager(clientContext);
                PersonProperties userProperties = peopleManager.GetPropertiesFor(targetUser);

                // This request loads the AccountName and user's all other Profile Properties.
                clientContext.Load(userProperties, p => p.AccountName, p => p.UserProfileProperties);
                clientContext.ExecuteQuery();

                foreach (var property in userProperties.UserProfileProperties)
                {
                    Console.WriteLine($"{property.Key}: {property.Value}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            // Handle the exception as needed.
        }
    }

    static void Main()
    {
        GetTargetUserProfileProperties();
    }
}





///
using Microsoft.Identity.Client;
using Microsoft.SharePoint.Client;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Security;
using System.Threading.Tasks;

public class UserProfileFunction
{
    private readonly IConfiguration _configuration;

    public UserProfileFunction(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    [FunctionName("GetUserProfile")]
    public async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("C# HTTP trigger function processed a request.");

        string siteUrl = _configuration["SharePointSiteUrl"];
        string clientId = _configuration["SharePointClientId"];
        string clientSecret = _configuration["SharePointClientSecret"];
        string targetUser = "i:0#.f|membership|alexd@spotenant.onmicrosoft.com";

        try
        {
            var clientCredential = new ClientCredential(clientId, clientSecret);

            using (var clientContext = AuthenticationHelper.GetAppOnlyAuthenticatedContext(siteUrl, clientCredential))
            {
                PeopleManager peopleManager = new PeopleManager(clientContext);
                PersonProperties userProperties = peopleManager.GetPropertiesFor(targetUser);

                clientContext.Load(userProperties, p => p.AccountName, p => p.UserProfileProperties);
                await clientContext.ExecuteQueryAsync();

                var userProfileData = userProperties.UserProfileProperties
                    .ToDictionary(property => property.Key.ToString(), property => property.Value.ToString());

                return new OkObjectResult(JsonConvert.SerializeObject(userProfileData));
            }
        }
        catch (Exception ex)
        {
            log.LogError($"Error: {ex.Message}");
            return new BadRequestObjectResult("Error retrieving user profile");
        }
    }
}

// Helper class for authentication
public static class AuthenticationHelper
{
    public static ClientContext GetAppOnlyAuthenticatedContext(string siteUrl, ClientCredential clientCredential)
    {
        var authority = "https://login.microsoftonline.com/your-tenant-id";
        var authenticationContext = new AuthenticationContext(authority, false);

        var authenticationResult = authenticationContext.AcquireTokenAsync(siteUrl, clientCredential).Result;

        var clientContext = new ClientContext(siteUrl)
        {
            AuthenticationMode = ClientAuthenticationMode.Anonymous,
            FormDigestHandlingEnabled = false
        };

        clientContext.ExecutingWebRequest += (sender, args) =>
        {
            args.WebRequestExecutor.RequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authenticationResult.AccessToken);
        };

        return clientContext;
    }
}


////



#r "Microsoft.Graph"
#r "Newtonsoft.Json"

using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Microsoft.Graph;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;

public static class GetUserAndDirectReportsFunction
{
    [FunctionName("GetUserAndDirectReports")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req)
    {
        try
        {
            var graphServiceClient = GetGraphServiceClient();

            // Replace with your user's email
            string userMail = req.Query["userMail"];

            // Fetch user data
            var user = await graphServiceClient.Users[userMail].Request().GetAsync();

            // Fetch direct reports
            var directReports = await GetDirectReports(graphServiceClient, user.Id);

            // Combine user and direct reports data
            var resultData = new
            {
                User = user,
                DirectReports = directReports
            };

            return new OkObjectResult(resultData);
        }
        catch (Exception ex)
        {
            return new BadRequestObjectResult($"An error occurred: {ex.Message}");
        }
    }

    static GraphServiceClient GetGraphServiceClient()
    {
        // For local development, use the default settings provided by Azure Functions runtime
        var authProvider = new InteractiveBrowserProvider();
        return new GraphServiceClient(authProvider);
    }

    static async Task<List<User>> GetDirectReports(GraphServiceClient graphServiceClient, string userId)
    {
        var directReports = await graphServiceClient.Users[userId].DirectReports.Request().GetAsync();
        var directReportUsers = new List<User>();

        foreach (var report in directReports)
        {
            var reportUser = await graphServiceClient.Users[report.Id].Request().GetAsync();
            directReportUsers.Add(reportUser);
        }

        return directReportUsers;
    }
}



////////////////////////

#r "Microsoft.Identity.Client"
#r "Newtonsoft.Json"

using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Identity.Client;
using Newtonsoft.Json;

public static async Task<HttpResponseMessage> Run(HttpRequestMessage req, ILogger log)
{
    // Replace these values with your own
    string clientId = "your-client-id";
    string clientSecret = "your-client-secret";
    string tenantId = "your-tenant-id";
    string userId = "user-id-to-retrieve-profile"; // Replace with the user's ID

    var confidentialClientApplication = ConfidentialClientApplicationBuilder
        .Create(clientId)
        .WithClientSecret(clientSecret)
        .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
        .Build();

    var authResult = await confidentialClientApplication
        .AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" })
        .ExecuteAsync();

    using (var httpClient = new HttpClient())
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authResult.AccessToken);

        var graphApiEndpoint = $"https://graph.microsoft.com/v1.0/users/{userId}";
        var response = await httpClient.GetAsync(graphApiEndpoint);

        if (response.IsSuccessStatusCode)
        {
            var userJson = await response.Content.ReadAsStringAsync();
            var userProfile = JsonConvert.DeserializeObject(userJson);
            return req.CreateResponse(System.Net.HttpStatusCode.OK, userProfile);
        }
        else
        {
            return req.CreateResponse(System.Net.HttpStatusCode.InternalServerError, "Failed to retrieve user profile.");
        }
    }
}

















//////////////
public class UserProfileFunction
{
    private readonly IConfiguration _configuration;

    public UserProfileFunction(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    [FunctionName("GetUserProfile")]
    public async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation("C# HTTP trigger function processed a request.");

        string siteUrl = _configuration["SharePointSiteUrl"];
        string clientId = _configuration["SharePointClientId"];
        string clientSecret = _configuration["SharePointClientSecret"];
        string targetUser = "i:0#.f|membership|alexd@spotenant.onmicrosoft.com";

        try
        {
            var clientCredential = new ClientCredential(clientId, clientSecret);

            using (var clientContext = new AuthenticationHelper().GetAppOnlyAuthenticatedContext(siteUrl, clientCredential))
            {
                PeopleManager peopleManager = new PeopleManager(clientContext);
                PersonProperties userProperties = peopleManager.GetPropertiesFor(targetUser);

                clientContext.Load(userProperties, p => p.AccountName, p => p.UserProfileProperties);
                await clientContext.ExecuteQueryAsync();

                var userProfileData = userProperties.UserProfileProperties
                    .ToDictionary(property => property.Key.ToString(), property => property.Value.ToString());

                return new OkObjectResult(JsonConvert.SerializeObject(userProfileData));
            }
        }
        catch (Exception ex)
        {
            log.LogError($"Error: {ex.Message}");
            return new BadRequestObjectResult("Error retrieving user profile");
        }
    }
}
