using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Graph;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;
using Microsoft.Graph.Models;
using Azure.Identity;

public static class UserReporteesFunction
{
    private static GraphServiceClient graphServiceClient;

    static UserReporteesFunction()
    {
        var clientId = "your_client_id";
        var tenantId = "your_tenant_id";
        var clientSecret = "your_client_secret";
        var scopes = new[] { "https://graph.microsoft.com/.default" };

        var options = new TokenCredentialOptions
        {
            AuthorityHost = AzureAuthorityHosts.AzurePublicCloud
        };

        // Build a client secret credential
        var clientSecretCredential = new ClientSecretCredential(
            tenantId, clientId, clientSecret, options);

        // Initialize the GraphServiceClient
        graphServiceClient = new GraphServiceClient(clientSecretCredential, scopes);
      //  graphServiceClient = new GraphServiceClient(/* Authentication provider here */);
    }

    [FunctionName("UserReporteesFunction")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = null)] HttpRequest req,
        ILogger log)
    {
        string userPrincipalName = req.Query["userPrincipalName"];

        if (string.IsNullOrEmpty(userPrincipalName))
        {
            return new BadRequestObjectResult("UserPrincipalName must be provided.");
        }

        try
        {
            // Get current user info
            var currentUser = await graphServiceClient.Users[userPrincipalName].GetAsync();
            var userInfo = ExtractUserInfo(currentUser);
            // Log current user info
            log.LogInformation($"Current User: {userInfo.DisplayName}, {userInfo.Email}");

            // Get reportees
            var directReports = await graphServiceClient.Users[userPrincipalName].DirectReports
                .GetAsync();
             var directReportsVal = directReports.Value;

            var reporteesInfo = new List<UserInfo>();
            foreach (var reportee in directReportsVal)
            {
                if (reportee is User user)
                {
                    var reporteeUserInfo = ExtractUserInfo(user);
                    reporteesInfo.Add(reporteeUserInfo);
                    log.LogInformation($"Reportee: {reporteeUserInfo.DisplayName}, {reporteeUserInfo.Email}");
                }
            }

            return new OkObjectResult(new { User = userInfo, Reportees = reporteesInfo });
        }
        catch (ServiceException ex)
        {
            log.LogError($"Error retrieving user information: {ex.Message}");
            return new StatusCodeResult(500);
        }
        catch (Exception ex)
        {
            log.LogError($"An error occurred: {ex.Message}");
            return new StatusCodeResult(500);
        }
    }
   
  
    private static UserInfo ExtractUserInfo(User user)
    {
        return new UserInfo
        {
            DisplayName = user.DisplayName,
            GivenName = user.GivenName,
            JobTitle = user.JobTitle,
            Email = user.Mail,
            MobilePhone = user.MobilePhone,
            OfficeLocation = user.OfficeLocation,
            PreferredLanguage = user.PreferredLanguage,
            UserPrincipalName = user.UserPrincipalName
        };
    }
}

public class UserInfo
{
    public string DisplayName { get; set; }
    public string GivenName { get; set; }
    public string JobTitle { get; set; }
    public string Email { get; set; }
    public string MobilePhone { get; set; }
    public string OfficeLocation { get; set; }
    public string PreferredLanguage { get; set; }
    public string UserPrincipalName { get; set; }
}
