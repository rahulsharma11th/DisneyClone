using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Graph;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Identity;
using Microsoft.Graph.Models;

public static class UserReporteesFunction
{
    private static GraphServiceClient graphServiceClient;

    static UserReporteesFunction()
    {
        // Initialize your GraphServiceClient here with the appropriate authentication
        // graphServiceClient = new GraphServiceClient(/* Authentication provider here */);
    }

    [FunctionName("GetReporteesHierarchy")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", Route = null)] HttpRequest req,
        ILogger log)
    {
        string userPrincipalName = req.Query["userPrincipalName"];

        if (string.IsNullOrEmpty(userPrincipalName))
        {
            return new BadRequestObjectResult("UserPrincipalName must be provided.");
        }

        try
        {
            // Fetch and log the hierarchy
            var hierarchy = await GetReporteesHierarchyAsync(userPrincipalName, log);

            return new OkObjectResult(hierarchy);
        }
        catch (ServiceException ex)
        {
            log.LogError($"Error retrieving user information: {ex.Message}");
            return new StatusCodeResult(500);
        }
    }

    private static async Task<UserHierarchy> GetReporteesHierarchyAsync(string userPrincipalName, ILogger log)
    {
        var user = await graphServiceClient.Users[userPrincipalName].GetAsync();
        var userInfo = ExtractUserInfo(user);

        // Fetch the direct reportees
        var directReports = await graphServiceClient.Users[userPrincipalName].DirectReports
            .GetAsync();
        var directReportsVal = directReports.Value;
        var reporteesInfo = new List<UserInfo>();
        foreach (var reportee in directReportsVal)
        {
            if (reportee is User reporteeUser)
            {
                var reporteeHierarchy = await GetReporteesHierarchyAsync(reporteeUser.UserPrincipalName, log);
                reporteesInfo.Add(reporteeHierarchy.UserInfo);
                reporteesInfo.AddRange(reporteeHierarchy.Reportees);
            }
        }

        return new UserHierarchy
        {
            UserInfo = userInfo,
            Reportees = reporteesInfo
        };
    }

    private static UserInfo ExtractUserInfo(User user)
    {
        return new UserInfo
        {
            DisplayName = user.DisplayName,
            GivenName = user.GivenName,
            JobTitle = user.JobTitle,
            Email = user.Mail,
            MobilePhone = user.MobilePhone,
            OfficeLocation = user.OfficeLocation,
            PreferredLanguage = user.PreferredLanguage,
            UserPrincipalName = user.UserPrincipalName
        };
    }
}

public class UserHierarchy
{
    public UserInfo UserInfo { get; set; }
    public List<UserInfo> Reportees { get; set; }
}

public class UserInfo
{
    public string DisplayName { get; set; }
    public string GivenName { get; set; }
    public string JobTitle { get; set; }
    public string Email { get; set; }
    public string MobilePhone { get; set; }
    public string OfficeLocation { get; set; }
    public string PreferredLanguage { get; set; }
    public string UserPrincipalName { get; set; }
}
