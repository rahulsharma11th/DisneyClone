///
import React, { useState, useEffect } from 'react';
import { MSGraphClient } from '@microsoft/sp-http';

const OrgChartComponent = ({ graphClient }: { graphClient: Promise<MSGraphClient> }) => {
  const [reportees, setReportees] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReporteesInBatch = async (client: MSGraphClient, userIds: string[]): Promise<string[]> => {
      if (userIds.length === 0) return [];

      const MAX_BATCH_SIZE = 20;
      let allReportees = [];
      let nextUserIds = []; 

      // Splitting userIds into chunks of MAX_BATCH_SIZE
      for (let i = 0; i < userIds.length; i += MAX_BATCH_SIZE) {
        const userIdsChunk = userIds.slice(i, i + MAX_BATCH_SIZE);
        const batchRequests = userIdsChunk.map((userId, index) => ({
          id: `id-${i + index}`,
          method: 'GET',
          url: `/users/${userId}/directReports`
        }));

        try {
          const batchResponse = await client.api('/$batch').version('v1.0').post({ requests: batchRequests });

          for (const response of batchResponse.responses) {
            const reports = response.body.value;
            for (const report of reports) {
              if (report['@odata.type'] === '#microsoft.graph.user') {
                allReportees.push(report.displayName);
                nextUserIds.push(report.id);
              }
            }
          }
        } catch (error) {
          console.error('Error in batch fetching', error);
          throw error;
        }
      }

      // Recursively fetch further reportees in batches
      const additionalReportees = await fetchReporteesInBatch(client, nextUserIds);
      return allReportees.concat(additionalReportees);
    };

    graphClient.then(client => {
      client.api('/me').get()
        .then(response => fetchReporteesInBatch(client, [response.id]))
        .then(fetchedReportees => setReportees(fetchedReportees))
        .catch(fetchError => setError(fetchError.message || 'Error fetching data'));
    });
  }, [graphClient]);

  return (
    <div>
      {error && <div>Error: {error}</div>}
      {reportees.length > 0 ? (
        <ul>
          {reportees.map((reportee, index) => (
            <li key={index}>{reportee}</li>
          ))}
        </ul>
      ) : <div>Loading reportees...</div>}
    </div>
  );
};

export default OrgChartComponent;



















////////////////////
////////////////////
import React, { useState, useEffect } from 'react';
import { MSGraphClient } from '@microsoft/sp-http';

const OrgChartComponent = ({ graphClient }) => {
  const [hierarchy, setHierarchy] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchOrgHierarchy = async (userId, client) => {
      try {
        const user = await client.api(`/users/${userId}`).select('displayName').get();
        const userReportsResponse = await client.api(`/users/${userId}/directReports`).get();
        const userReports = userReportsResponse.value;

        let hierarchyNode = {
          user: user.displayName,
          reports: []
        };

        for (let report of userReports) {
          if (report['@odata.type'] === '#microsoft.graph.user') {
            const reportHierarchy = await fetchOrgHierarchy(report.id, client);
            hierarchyNode.reports.push(reportHierarchy);
          }
        }

        return hierarchyNode;
      } catch (error) {
        console.error('Error fetching organization hierarchy', error);
        throw error;
      }
    };

    graphClient.then(client => {
      fetchOrgHierarchy('me', client)
        .then(fetchedHierarchy => {
          setHierarchy(fetchedHierarchy);
        })
        .catch(error => {
          setError(error.message || 'Error fetching data');
        });
    });
  }, [graphClient]);

  const renderOrgChart = () => {
    // Implement the visualization logic for the organization chart
  };

  return (
    <div>
      {error && <div>Error: {error}</div>}
      {hierarchy ? renderOrgChart() : <div>Loading...</div>}
    </div>
  );
};

export default OrgChartComponent;


/////////////////////


import React, { useState, useEffect } from 'react';
import { MSGraphClient } from '@microsoft/sp-http';

interface IHierarchyNode {
  user: string;
  reports: IHierarchyNode[];
}

const OrgChartComponent = ({ graphClient }: { graphClient: Promise<MSGraphClient> }) => {
  const [hierarchy, setHierarchy] = useState<IHierarchyNode | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUserHierarchy = async (client: MSGraphClient, userId: string): Promise<IHierarchyNode> => {
      try {
        const user = await client.api(`/users/${userId}`).select('displayName').version('v1.0').get();
        return { user: user.displayName, reports: await fetchDirectReports(client, userId) };
      } catch (error) {
        console.error('Error fetching user data', error);
        throw error;
      }
    };

    const fetchDirectReports = async (client: MSGraphClient, userId: string): Promise<IHierarchyNode[]> => {
      try {
        const reportsResponse = await client.api(`/users/${userId}/directReports`).version('v1.0').get();
        const reports = reportsResponse.value;

        // Batch requests for direct reports
        const batchRequests = reports.map((report, index) => ({
          id: index.toString(),
          method: 'GET',
          url: `/users/${report.id}/directReports`
        }));

        const batchResponse = await client.api('/$batch').post({ requests: batchRequests });
        return await Promise.all(batchResponse.responses.map(async (response, index) => {
          const reportUserId = reports[index].id;
          return fetchUserHierarchy(client, reportUserId);
        }));
      } catch (error) {
        console.error('Error fetching direct reports', error);
        throw error;
      }
    };

    graphClient.then(client => {
      fetchUserHierarchy(client, 'me')
        .then(fetchedHierarchy => setHierarchy(fetchedHierarchy))
        .catch(fetchError => setError(fetchError.message || 'Error fetching data'));
    });
  }, [graphClient]);

  const renderOrgChart = () => {
    // Implement the visualization logic for the organization chart
  };

  return (
    <div>
      {error && <div>Error: {error}</div>}
      {hierarchy ? renderOrgChart() : <div>Loading...</div>}
    </div>
  );
};

export default OrgChartComponent;


////////////////////////////////////////



import React, { useState, useEffect } from 'react';
import { MSGraphClient } from '@microsoft/sp-http';

const OrgChartComponent = ({ graphClient }: { graphClient: Promise<MSGraphClient> }) => {
  const [reportees, setReportees] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReporteesInBatch = async (client: MSGraphClient, userIds: string[]): Promise<string[]> => {
      if (userIds.length === 0) return [];

      // Create batch requests
      const batchRequests = userIds.map((userId, index) => ({
        id: index.toString(),
        method: 'GET',
        url: `/users/${userId}/directReports`
      }));

      try {
        const batchResponse = await client.api('/$batch').version('v1.0').post({ requests: batchRequests });
        let allReportees = [];
        let nextUserIds = []; // Collect user IDs for the next batch

        for (const response of batchResponse.responses) {
          const reports = response.body.value;
          for (const report of reports) {
            if (report['@odata.type'] === '#microsoft.graph.user') {
              allReportees.push(report.displayName);
              nextUserIds.push(report.id);
            }
          }
        }

        // Recursively fetch further reportees in batches
        const additionalReportees = await fetchReporteesInBatch(client, nextUserIds);
        return allReportees.concat(additionalReportees);
      } catch (error) {
        console.error('Error in batch fetching', error);
        throw error;
      }
    };

    graphClient.then(client => {
      client.api('/me').get()
        .then(response => fetchReporteesInBatch(client, [response.id]))
        .then(fetchedReportees => setReportees(fetchedReportees))
        .catch(fetchError => setError(fetchError.message || 'Error fetching data'));
    });
  }, [graphClient]);

  return (
    <div>
      {error && <div>Error: {error}</div>}
      {reportees.length > 0 ? (
        <ul>
          {reportees.map((reportee, index) => (
            <li key={index}>{reportee}</li>
          ))}
        </ul>
      ) : <div>Loading reportees...</div>}
    </div>
  );
};

export default OrgChartComponent;

